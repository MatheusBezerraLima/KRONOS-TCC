version: '3.8'

services:
  # Serviço da aplicação Node.js
  app:
    build: . #Controi a imagem a partir do Dockerfile da pasta atual.
    container_name: kronos-app
    restart: unless-stopped
    ports:
      - "3333:3333" #Porta do host - Porta do container
    environment:
      # Variáveis do meu .env
      - DB_HOST= ${DB_HOST} # IMPORTANTE: O host é o nome do serviço do banco!
      - DB_NAME= ${DB_NAME}
      - DB_USER= ${DB_USER}
      - DB_PASSWORD= ${DB_PASSWORD}
      - PORT= ${PORT}
      - SECRET= ${SECRET}
      - GOOGLE_SECRET_KEY= ${GOOGLE_SECRET_KEY}
      - GOOGLE_CLIENT_ID= ${GOOGLE_CLIENT_ID}
      - GITHUB_SECRET_KEY= ${GITHUB_SECRET_KEY}
      - GITHUB_CLIENT_ID= ${GITHUB_CLIENT_ID}
    depends_on:
      - db # Garantindo que o container do banco inicie antes do da minha aplicação
    volumes:
      # Mapeia a pasta atual (.) local para /usr/src/app no container
      - .:/usr/src/app
      # Isso evita conflitos de sistema operacional (Windows vs. Linux).
      - /usr/src/app/node_modules

    command: /bin/sh -c "dos2unix /usr/src/app/entrypoint.sh && /usr/src/app/entrypoint.sh"

  # Serviços do Banco de Dados MySQL   
  db:
    image: mysql:8.0
    container_name: kronos-db
    restart: unless-stopped
    environment:
      # Essas variáveis são usadas pela imagem do MySQL para a inicialização.
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  # Declaração do volume nomeado que será gerenciado pelo Docker.
volumes:
  mysql-data: